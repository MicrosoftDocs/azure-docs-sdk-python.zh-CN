### YamlMime:YamlDocument
documentType: Tutorial
title: "使用用于 Python 的 Azure 库开始云开发"
metadata:
  title: "用于 Python 的 Azure 库入门"
  description: "了解如何创建 Azure 云资源，以及如何在 Python 应用程序中连接和使用这些资源。"
  audience: Developer
  level: Beginner
  nextTutorialHref: /python/api/overview/azure/?view=azure-python
  nextTutorialTitle: "Python SDK 参考"
  displayType: two-column
  interactive: azurecli
  ms.openlocfilehash: 103dd9fa8307f8f71eab6d219e8a2dad28ba94f0
  ms.sourcegitcommit: 932b476b0f0c4c6613a4bdc1b0b96e6ce4ba8fcb
  ms.translationtype: HT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 12/14/2017
items:
- durationInMinutes: 
  content: "本指南演示多个用于 Python 的 Azure 库的用法。  \n"
- title: "先决条件"
  durationInMinutes: 5
  content: "- 一个 Azure 帐户。 如果没有帐户，可[获取一个免费试用帐户](https://azure.microsoft.com/free/)。\n- [Python](https://www.python.org/downloads/)\n- [Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/quickstart) 或 [Azure CLI 2.0](https://docs.microsoft.com/cli/azure/install-az-cli2)。\n"
- title: "设置身份验证"
  durationInMinutes: 5
  content: "> [!IMPORTANT]\n> 应将此方法用作开发人员快速入门体验。 对于生产用途，请使用 [ADAL](https://github.com/AzureAD/azure-activedirectory-library-for-python) 或自己的凭据系统。\n> 对 CLI 配置进行任何更改会影响 SDK 的执行。\n\nSDK 能够使用 CLI 活动订阅创建客户端。\n\n若要定义活动的凭据，请使用 [az login](https://docs.microsoft.com/cli/azure/authenticate-azure-cli)。\n默认的订阅 ID 是你拥有的唯一 ID，或使用 [az account](https://docs.microsoft.com/cli/azure/manage-azure-subscriptions-azure-cli) 定义的 ID。\n\n```python\nfrom azure.common.client_factory import get_client_from_cli_profile\nfrom azure.mgmt.compute import ComputeManagementClient\n\nclient = get_client_from_cli_profile(ComputeManagementClient)\n```\n"
- title: "创建虚拟环境"
  durationInMinutes: 5
  content: "> [!IMPORTANT]\n> 创建虚拟环境是可选的操作，但我们强烈建议这样做。\n\n在 Bash 中创建虚拟环境（Linux 或 [Bash for Windows](https://msdn.microsoft.com/commandline/wsl/about)）：\n```bash\npip install virtualenv\nvirtualenv mytestenv\ncd mytestenv\nsource ./bin/activate\n```\n\n在 PowerShell 中创建虚拟环境：\n```powershell\npip install virtualenv\nvirtualenv mytestenv\ncd mytestenv\n.\\Scripts\\activate\n```\n"
- title: "创建 Linux 虚拟机"
  durationInMinutes: 5
  content: "此代码会在美国东部 Azure 区域中运行的资源组 `sampleVmResourceGroup` 内创建名为 `testLinuxVM` 的新 Linux VM。\n\n身份验证：\n```azcli\naz login\n```\n创建资源组：\n```azurecli-interactive\naz group create -l eastus --n sampleVmResourceGroup\n```\n\n创建虚拟网络和子网：\n```azurecli-interactive\naz network vnet create -g sampleVmResourceGroup -n azure-sample-vnet --address-prefix 10.0.0.0/16 --subnet-name azure-sample-subnet --subnet-prefix 10.0.0.0/24\n```\n\n创建公共 IP 地址：\n```azurecli-interactive\naz network public-ip create -g sampleVmResourceGroup -n azure-sample-ip --allocation-method Dynamic --version IPv6\n```\n创建网络接口客户端：\n```azurecli-interactive\naz network nic create -g sampleVmResourceGroup --vnet-name azure-sample-vnet --subnet azure-sample-subnet -n azure-sample-nic --public-ip-address azure-sample-ip\n```\n\n```python\nfrom azure.mgmt.network import NetworkManagementClient\nfrom azure.mgmt.compute import ComputeManagementClient\nfrom azure.common.client_factory import get_client_from_cli_profile\n\n# Azure Datacenter\nLOCATION = 'eastus'\n\n# Resource Group\nGROUP_NAME = 'sampleVmResourceGroup'\n\n# Network\nVNET_NAME = 'azure-sample-vnet'\nSUBNET_NAME = 'azure-sample-subnet'\n\n# VM\nNIC_NAME = 'azure-sample-nic'\nVM_NAME = 'testLinuxVM'\n\nUSERNAME = 'userlogin'\nPASSWORD = 'Pa$$w0rd91'\n\nIP_ADDRESS_NAME='azure-sample-ip'\n\nVM_REFERENCE = {\n    'linux': {\n        'publisher': 'Canonical',\n        'offer': 'UbuntuServer',\n        'sku': '16.04.0-LTS',\n        'version': 'latest'\n    },\n    'windows': {\n        'publisher': 'MicrosoftWindowsServerEssentials',\n        'offer': 'WindowsServerEssentials',\n        'sku': 'WindowsServerEssentials',\n        'version': 'latest'\n    }\n}\n\n\ndef run_example():\n\n    compute_client = get_client_from_cli_profile(ComputeManagementClient)\n    network_client = get_client_from_cli_profile(NetworkManagementClient)\n\n    # get nic id\n    nic = network_client.network_interfaces.get(GROUP_NAME, NIC_NAME)\n\n    # Create Linux VM\n    print('\\nCreating Linux Virtual Machine')\n    vm_parameters = create_vm_parameters(nic.id, VM_REFERENCE['linux'])\n    print(vm_parameters)\n    async_vm_creation = compute_client.virtual_machines.create_or_update(\n        GROUP_NAME, VM_NAME, vm_parameters)\n    async_vm_creation.wait()\n\n\ndef create_vm_parameters(nic_id, vm_reference):\n    \"\"\"Create the VM parameters structure.\n    \"\"\"\n    return {\n        'location': LOCATION,\n        'os_profile': {\n            'computer_name': VM_NAME,\n            'admin_username': USERNAME,\n            'admin_password': PASSWORD\n        },\n        'hardware_profile': {\n            'vm_size': 'Standard_DS1_v2'\n        },\n        'storage_profile': {\n            'image_reference': {\n                'publisher': vm_reference['publisher'],\n                'offer': vm_reference['offer'],\n                'sku': vm_reference['sku'],\n                'version': vm_reference['version']\n            },\n        },\n        'network_profile': {\n            'network_interfaces': [{\n                'id': nic_id,\n            }]\n        },\n    }\n\n\nif __name__ == \"__main__\":\n    run_example()\n```\n\n程序完成后，使用 Azure CLI 2.0 验证订阅中的虚拟机：\n\n```azurecli-interactive\naz vm list --resource-group sampleVmResourceGroup\n```\n\n验证代码正常运行后，使用 CLI 删除 VM 及其资源。\n\n```azurecli-interactive\naz group delete --name sampleVmResourceGroup\n```\n"
- title: "从 GitHub 存储库部署 Web 应用"
  durationInMinutes: 5
  content: "此代码会将 GitHub 存储库的 `master` 分支中的某个 Flask Web 应用程序部署到免费层中运行的新 [Azure 应用服务 Web 应用](https://docs.microsoft.com/azure/app-service-web/app-service-web-overview)。 \n\n开始之前：创建 https://github.com/Azure-Samples/python-docs-hello-world 的分叉\n\n身份验证：\n```azcli\naz login\n```\n创建资源组：\n```azurecli-interactive\naz group create -l eastus -n sampleWebResourceGroup\n```\n\n创建免费应用服务计划：\n```azurecli-interactive\naz appservice plan create -g sampleWebResourceGroup -n sampleFreePlan  --sku Free\n```\n\n```python\nfrom azure.mgmt.web import WebSiteManagementClient\nfrom azure.mgmt.web.models import Site, SiteSourceControl, SiteConfig\nfrom azure.common.client_factory import get_client_from_cli_profile\n\nRESOURCE_GROUP_NAME = 'sampleWebResourceGroup'\nSERVICE_PLAN_NAME = 'sampleFreePlanName'\nWEB_APP_NAME = 'sampleflaskapp123'\nREPO_URL = 'GitHub_Repository_URL'\n\n#log in\nweb_client = get_client_from_cli_profile(WebSiteManagementClient)\n\n# get service plan id\nservice_plan = web_client.app_service_plans.get(RESOURCE_GROUP_NAME, SERVICE_PLAN_NAME)\n\n# create a web app\nsiteConfiguration = SiteConfig(\n    python_version='3.4',\n)\nsite_async_operation = web_client.web_apps.create_or_update(\n    RESOURCE_GROUP_NAME,\n    WEB_APP_NAME,\n    Site(\n        location='eastus',\n        server_farm_id=service_plan.id,\n        site_config=siteConfiguration\n    ),\n)\n\nsite = site_async_operation.result()\nprint('created webapp: ' + site.default_host_name)\n\n# continuous deployment with GitHub\nsource_control_async_operation = web_client.web_apps.create_or_update_source_control(\n    RESOURCE_GROUP_NAME,\n    WEB_APP_NAME,\n    SiteSourceControl(\n        location='GitHub',\n        repo_url= REPO_URL,\n        branch='master'\n    )\n)\n\nsource_control = source_control_async_operation.result()\nprint(\"added source control to: \" + source_control.name + \"azurewebsites.net\")\n```\n\n使用 CLI 打开指向该应用程序的浏览器：\n```azurecli-interactive\naz appservice web browse --resource-group sampleWebResourceGroup --name YOUR_APP_NAME\n```\n\n验证部署后，请从订阅中删除 Web 应用和计划。 \n```azurecli-interactive\naz group delete --name sampleWebResourceGroup\n```\n"
- title: "连接到 SQL 数据库"
  durationInMinutes: 5
  content: "此代码会创建新的 SQL 数据库（包含一条允许远程访问的防火墙规则），然后使用 Microsoft ODBC 驱动程序连接到该数据库。 Pyodbc 使用 Linux 上的 Microsoft ODBC 驱动程序连接到 SQL 数据库。 \n\n身份验证：\n```azcli\naz login\n```\n创建资源组：\n```azurecli-interactive\naz group create -l eastus -n azure-sample-group\n```\n\n创建 SQL 服务器：\n```azurecli-interactive\naz sql server create --admin-password HusH_Sec4et --admin-user mysecretname -l eastus -n samplesqlserver123 -g azure-sample-group\n```\n\n添加防火墙规则：\n```azurecli-interactive\naz sql server firewall-rule create --end-ip-address 167.220.0.235 --name firewall_rule_name_123.123.123.123 --resource-group azure-sample-group --server samplesqlserver123 --start-ip-address 123.123.123.123\n```\n\n创建 SQL 数据库：\n```azurecli-interactive\naz sql db create --name sample-db --resource-group azure-sample-group --server samplesqlserver123\n```\n\n```python\nfrom azure.mgmt.sql import SqlManagementClient\nfrom azure.common.client_factory import get_client_from_cli_profile\nimport pyodbc\n\nLOCATION = 'eastus'\nGROUP_NAME = 'azure-sample-group'\nSERVER_NAME = 'samplesqlserver123'\nDATABASE_NAME = 'sample-db'\nUSER_NAME ='mysecretname'\nPASSWORD='HusH_Sec4et'\n\n# authenticate\nsql_client = get_client_from_cli_profile(SqlManagementClient)\n\n\ndef run_example():\n# Get SQL database\nprint('Get SQL database')\ndatabase = sql_client.databases.get(\n    GROUP_NAME,\n    SERVER_NAME,\n    DATABASE_NAME\n)\nprint(database)\nprint(\"\\n\\n\")\n\n\ndef create_and_insert():\nserver = SERVER_NAME+'.database.windows.net'\ndatabase = DATABASE_NAME\nusername = USER_NAME\npassword = PASSWORD\ndriver = '{ODBC Driver 13 for SQL Server}'\ncnxn = pyodbc.connect(\n    'DRIVER=' + driver + ';PORT=1433;SERVER=' + server + ';PORT=1443;DATABASE=' + database + ';UID=' + username + ';PWD=' + password)\ncursor = cnxn.cursor()\ntsql = \"CREATE TABLE CLOUD (name varchar(255), code int);\"\ntsqlInsert = \"INSERT INTO CLOUD (name, code) VALUES ('Azure', 1); \"\nselectValues = \"SELECT * FROM CLOUD\"\nwith cursor.execute(tsql):\n    print('Successfully created table!')\nwith cursor.execute(tsqlInsert):\n    print('Successfully inserted data into table')\ncursor.execute(selectValues)\nrow = cursor.fetchone()\nwhile row:\n    print(str(row[0]) + \" \" + str(row[1]))\n    row = cursor.fetchone()\ncnxn.commit()\n\nif __name__ == \"__main__\":\nrun_example()\ncreate_and_insert()\n```\n\n验证代码正常运行后，使用 CLI 删除 SQL 数据库及其资源。\n\n```azurecli-interactive\naz group delete --name azure-sample-group\n```\n"
- title: "将 Blob 写入新存储帐户"
  durationInMinutes: 5
  content: "身份验证：\n```azcli\naz login\n```\n创建资源组：\n```azurecli-interactive\naz group create -l eastus -n sampleStorageResourceGroup\n```\n\n创建存储帐户：\n```azurecli-interactive\naz storage account create -n samplestorageaccountname -g sampleStorageResourceGroup -l eastus --sku Standard_RAGRS\n```\n\n此代码会创建一个 [Azure 存储帐户](https://docs.microsoft.com/azure/storage/storage-introduction)，然后使用用于 Python 的 Azure 存储库在云中创建新的 html 文件。 \n```python\nfrom azure.storage import CloudStorageAccount\nfrom azure.storage.blob import PublicAccess\nfrom azure.storage.blob.models import ContentSettings\nfrom azure.common.client_factory import get_client_from_cli_profile\nfrom azure.mgmt.storage import StorageManagementClient\n\nRESOURCE_GROUP = 'sampleStorageResourceGroup'\nSTORAGE_ACCOUNT_NAME = 'samplestorageaccountname'\nCONTAINER_NAME = 'samplecontainername'\n\n# log in\nstorage_client = get_client_from_cli_profile(StorageManagementClient)\n\n# create a public storage container to hold the file\nstorage_keys = storage_client.storage_accounts.list_keys(RESOURCE_GROUP, STORAGE_ACCOUNT_NAME)\nstorage_keys = {v.key_name: v.value for v in storage_keys.keys}\n\nstorage_client = CloudStorageAccount(STORAGE_ACCOUNT_NAME, storage_keys['key1'])\nblob_service = storage_client.create_block_blob_service()\n\nblob_service.create_container(CONTAINER_NAME, public_access=PublicAccess.Container)\n\nblob_service.create_blob_from_bytes(\n    CONTAINER_NAME,\n    'helloworld.html',\n    b'<center><h1>Hello World!</h1></center>',\n    content_settings=ContentSettings('text/html')\n)\n\nprint(blob_service.make_blob_url(CONTAINER_NAME, 'helloworld.html'))\n```\n若要验证内容是否成功上传，请导航到输出的 URL。 \n\n使用 CLI 清理存储帐户：\n```azurecli-interactive\naz group delete --name sampleStorageResourceGroup\n```\n"
- title: "后续步骤"
  content: "已完成“用于 Python 的 Azure 库入门”。\n\n- 若要详细了解如何使用用于 Python 的 Azure 管理库来管理资源和自动执行任务，请参阅针对[虚拟机](python-sdk-azure-web-apps-samples.md)、[Web 应用](python-sdk-azure-web-apps-samples.md)和 [SQL 数据库](python-sdk-azure-sql-database-samples.md)的示例代码。\n\n- 我们为所有包提供了[参考](/python/api/overview/azure/?view=azure-python)文档。\0"
